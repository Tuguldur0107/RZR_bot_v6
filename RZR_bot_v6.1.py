import discord
from discord.ext import commands
from discord import app_commands
import asyncio
import os
from dotenv import load_dotenv
from datetime import datetime, timezone, timedelta
import openai
import json
from database import update_player_stats
from database import connect
from dotenv import load_dotenv
import asyncpg
from database import init_pool
from database import pool  # —ç–Ω—ç –∑–∞–∞–≤–∞–ª –±–∞–π—Ö —ë—Å—Ç–æ–π
from database import (
    # üéØ Score & tier
    get_score, upsert_score, get_all_scores, get_default_tier,
    promote_tier, demote_tier, get_player_stats,

    # üìä Match
    save_last_match, get_last_match, insert_match,

    # üßæ Score log
    log_score_transaction,

    # üõ° Session
    save_session_state, load_session_state,

    # üíñ Donator
    get_all_donators, upsert_donator,

    # üõ° Shields (—Ö—ç—Ä–≤—ç—ç –∞—à–∏–≥–ª–∞–∂ –±–∞–π–≤–∞–ª)
    get_shields, upsert_shield
)

# üåê ENV
load_dotenv()
TOKEN = os.getenv("DISCORD_TOKEN")
OPENAI_API_KEY = os.getenv("OPENAI_API_KEY")
GITHUB_TOKEN = os.getenv("GITHUB_TOKEN")
GITHUB_REPO = os.getenv("GITHUB_REPO")
GUILD_ID = int(os.getenv("GUILD_ID")) if os.getenv("GUILD_ID") else None

# üï∞ –¶–∞–≥–∏–π–Ω –±“Ø—Å
MN_TZ = timezone(timedelta(hours=8))

# üîß Discord intents
intents = discord.Intents.all()
bot = commands.Bot(command_prefix="/", intents=intents)

# üéÆ Session + Team
GAME_SESSION = {
    "active": False,
    "start_time": None,
    "last_win_time": None
}
TEAM_SETUP = {
    "initiator_id": None,
    "team_count": 2,
    "players_per_team": 5,
    "player_ids": [],
    "teams": [],
    "changed_players": []
}

# ‚öôÔ∏è Tier config (1-1 ‚Üí 5-5)
TIER_ORDER = [
    "1-1", "1-2", "1-3", "1-4", "1-5",
    "2-1", "2-2", "2-3", "2-4", "2-5",
    "3-1", "3-2", "3-3", "3-4", "3-5",
    "4-1", "4-2", "4-3", "4-4", "4-5",
    "5-1", "5-2", "5-3", "5-4", "5-5"
]
TIER_WEIGHT = {tier: i*5 for i, tier in enumerate(TIER_ORDER)}

TIER_WEIGHT = {
    tier: (len(TIER_ORDER) - i - 1) * 5
    for i, tier in enumerate(TIER_ORDER)
}

def calculate_weight(data):
    tier = data.get("tier", "4-1")
    score = data.get("score", 0)
    tier_weight = TIER_WEIGHT.get(tier, 0)
    return max(tier_weight + score, 0)

load_dotenv()
DATABASE_URL = os.getenv("DATABASE_URL")

def call_gpt_balance_api(team_count, players_per_team, players):
    prompt = f"""
–¢–∞ –¥–∞—Ä–∞–∞—Ö —Ç–æ–≥–ª–æ–≥—á–¥—ã–Ω –æ–Ω–æ–æ–Ω—ã –¥–∞–≥—É—É {team_count} –±–∞–≥—Ç, —Ç—É—Å –±“Ø—Ä {players_per_team} —Ö“Ø–Ω—Ç—ç–π —Ç—ç–Ω—Ü–≤—ç—Ä—Ç—ç–π –±–∞–≥ —Ö—É–≤–∞–∞—Ä–∏–ª–∂ ”©–≥–Ω”© “Ø“Ø.

–¢–æ–≥–ª–æ–≥—á–∏–¥: {players}

–ó”©–≤—Ö”©–Ω JSON —Ö—ç–ª–±—ç—Ä—ç—ç—Ä –¥–∞—Ä–∞–∞—Ö –±“Ø—Ç—ç—Ü—Ç—ç–π –±—É—Ü–∞–∞:
[
  [uid1, uid2, ...],  # 1-—Ä –±–∞–≥
  [uid3, uid4, ...]   # 2-—Ä –±–∞–≥
]
"""
    response = openai.ChatCompletion.create(
        model="gpt-4o",
        messages=[{"role": "user", "content": prompt}],
        temperature=0.5
    )
    content = response["choices"][0]["message"]["content"]
    return json.loads(content)

def tier_score(data: dict) -> int:
    tier = data.get("tier", "4-1")
    score = data.get("score", 0)
    return TIER_WEIGHT.get(tier, 0) + score

def promote_tier(tier):  # –∞—Ö–∏—Ö (”©—Ä–≥”©–º–∂–ª”©—Ö)
    try:
        i = TIER_ORDER.index(tier)
        return TIER_ORDER[max(i - 1, 0)]  # –¥—ç—ç—à –∞—Ö–∏—Ö ‚Üí index –±—É—É—Ä—É—É–ª–Ω–∞
    except:
        return tier

def demote_tier(tier):  # –±—É—É—Ä–∞—Ö (–¥–æ–æ—à–ª–æ—Ö)
    try:
        i = TIER_ORDER.index(tier)
        return TIER_ORDER[min(i + 1, len(TIER_ORDER) - 1)]  # –¥–æ–æ—à –±—É—É—Ö ‚Üí index –Ω—ç–º—ç–≥–¥—ç–Ω—ç
    except:
        return tier

def get_default_tier():
    return {"score": 0, "tier": "4-1"}

def snake_teams(player_weights, team_count, players_per_team):
    sorted_players = sorted(player_weights.items(), key=lambda x: x[1], reverse=True)
    teams = [[] for _ in range(team_count)]

    forward = True
    team_index = 0
    for uid, _ in sorted_players:
        teams[team_index].append(uid)

        if forward:
            team_index += 1
            if team_index == team_count:
                team_index -= 1
                forward = False
        else:
            team_index -= 1
            if team_index < 0:
                team_index = 0
                forward = True

    return teams

def greedy_teams(player_weights, team_count, players_per_team):
    sorted_players = sorted(player_weights.items(), key=lambda x: x[1], reverse=True)
    teams = [[] for _ in range(team_count)]
    team_totals = [0] * team_count

    for uid, weight in sorted_players:
        # ‚úÖ —Ö“Ø–Ω –±“Ø—Ä –±–∞–≥—Ç–∞–∞ –¥—ç—ç–¥ —Ç–∞–ª –Ω—å players_per_team —Ö“Ø—Ä–≥—ç–∂ –∞–≤–Ω–∞
        valid_indexes = [
            i for i in range(team_count)
            if len(teams[i]) < players_per_team
        ]

        if not valid_indexes:
            break  # –±“Ø—Ö –±–∞–≥ –¥“Ø“Ø—Ä—Å—ç–Ω –±–æ–ª –∑–æ–≥—Å–æ–Ω–æ

        min_team_index = min(valid_indexes, key=lambda i: team_totals[i])
        teams[min_team_index].append(uid)
        team_totals[min_team_index] += weight

    return teams

def reflector_teams(player_weights: dict, team_count: int, players_per_team: int):
    sorted_players = sorted(player_weights.items(), key=lambda x: x[1], reverse=True)
    teams = [[] for _ in range(team_count)]

    left = 0
    right = len(sorted_players) - 1
    i = 0

    while left <= right:
        if len(teams[i]) < players_per_team:
            teams[i].append(sorted_players[left][0])
            left += 1
        if left <= right and len(teams[i]) < players_per_team:
            teams[i].append(sorted_players[right][0])
            right -= 1
        i = (i + 1) % team_count

    return teams

def total_weight_difference(teams, player_weights):
    team_totals = [sum(player_weights.get(uid, 0) for uid in team) for team in teams]
    return max(team_totals) - min(team_totals)

def get_donator_emoji(data):
    from datetime import datetime, timezone, timedelta

    total = data.get("total_mnt", 0)
    last_donated = data.get("last_donated")

    if not last_donated:
        return None

    donated_time = datetime.fromisoformat(last_donated)
    now = datetime.now(timezone.utc)

    # –•—ç—Ä–≤—ç—ç 30 —Ö–æ–Ω–æ–≥ —Ö—ç—Ç—ç—Ä—Å—ç–Ω –±–æ–ª emoji –±–∞–π—Ö–≥“Ø–π
    if (now - donated_time).days > 30:
        return None

    if total >= 30000:
        return "üëë"
    elif total >= 10000:
        return "üí∏"
    else:
        return "üí∞"

def clean_nickname(nick: str) -> str:
    if not nick:
        return ""
    if "|" in nick:
        return nick.split("|")[-1].strip()
    return nick.strip()

async def insert_match(
    timestamp: datetime,
    initiator_id: int,
    team_count: int,
    players_per_team: int,
    winners: list,
    losers: list,
    mode: str,
    strategy: str,
    notes: str = ""
):
    pool = await asyncpg.create_pool(...)
    async with pool.acquire() as conn:
        await conn.execute("""
            INSERT INTO matches (
                timestamp, initiator_id, team_count, players_per_team,
                winners, losers, mode, strategy, notes
            ) VALUES ($1, $2, $3, $4, $5, $6, $7, $8, $9)
        """, timestamp, initiator_id, team_count, players_per_team,
             winners, losers, mode, strategy, notes)


# ‚è± 24h session timeout
async def session_timeout_checker():
    await bot.wait_until_ready()
    while not bot.is_closed():
        await asyncio.sleep(60)
        if GAME_SESSION["active"]:
            now = datetime.now(timezone.utc)
            if (
                GAME_SESSION["last_win_time"] and
                (now - GAME_SESSION["last_win_time"]).total_seconds() > 86400
            ):
                GAME_SESSION["active"] = False
                GAME_SESSION["start_time"] = None
                GAME_SESSION["last_win_time"] = None
                print("üîö Session –∞–≤—Ç–æ–º–∞—Ç–∞–∞—Ä —Ö–∞–∞–≥–¥–ª–∞–∞ (24h).")

# üß† nickname-–≥ –æ–Ω–æ–æ/emoji-–≥–∞–∞—Ä —à–∏–Ω—ç—á–ª—ç—Ö
async def update_nicknames_for_users(guild, user_ids: list):
    from database import get_score, get_all_donators
    donors = await get_all_donators()
    for uid in user_ids:
        member = guild.get_member(uid)
        if not member:
            continue

        data = await get_score(uid)
        if not data:
            continue

        tier = data["tier"]
        score = data["score"]
        base_nick = member.display_name.split("|")[-1].strip()

        emoji = "üëë" if uid in donors else ""
        prefix = f"{emoji} {tier}".strip()
        new_nick = f"{prefix} | {base_nick}"

        try:
            await member.edit(nick=new_nick)
        except:
            print(f"‚ö†Ô∏è Nickname update –∞–ª–¥–∞–∞: {uid}")

# üß¨ Start
@bot.event
async def on_ready():
    print(f"ü§ñ Bot –Ω—ç–≤—Ç—ç—Ä–ª—ç—ç: {bot.user}")
    await bot.tree.sync()
    await init_pool()
    print("‚úÖ Bot started & DB pool initialized.")
    asyncio.create_task(session_timeout_checker())

# üß© Command: ping
@bot.tree.command(name="ping", description="Bot-–∏–π–Ω latency-–≥ —à–∞–ª–≥–∞–Ω–∞")
async def ping(interaction: discord.Interaction):
    await interaction.response.send_message("üèì Pong!")

@bot.tree.command(name="start_match", description="Session —ç—Ö–ª“Ø“Ø–ª–Ω—ç, –±–∞–≥–∏–π–Ω —Ç–æ–æ –±–æ–ª–æ–Ω —Ç–æ–≥–ª–æ–≥—á–∏–π–Ω —Ç–æ–æ–≥ —Ç–æ—Ö–∏—Ä—É—É–ª–Ω–∞")
@app_commands.describe(team_count="–•—ç–¥—ç–Ω –±–∞–≥—Ç–∞–π –±–∞–π—Ö –≤—ç", players_per_team="–ù—ç–≥ –±–∞–≥—Ç —Ö—ç–¥—ç–Ω —Ö“Ø–Ω –±–∞–π—Ö –≤—ç")
async def start_match(interaction: discord.Interaction, team_count: int, players_per_team: int):
    try:
        await interaction.response.defer(thinking=True)
    except discord.errors.InteractionResponded:
        return

    try:
        GAME_SESSION["active"] = False
        GAME_SESSION["start_time"] = None
        GAME_SESSION["last_win_time"] = None

        now = datetime.now(timezone.utc)
        GAME_SESSION["active"] = True
        GAME_SESSION["start_time"] = now
        GAME_SESSION["last_win_time"] = now

        TEAM_SETUP.clear()
        TEAM_SETUP["team_count"] = team_count
        TEAM_SETUP["players_per_team"] = players_per_team
        TEAM_SETUP["player_ids"] = []
        TEAM_SETUP["teams"] = []
        TEAM_SETUP["changed_players"] = []
        TEAM_SETUP["initiator_id"] = interaction.user.id

        try:
            await save_session_state(GAME_SESSION, TEAM_SETUP)
            print("‚úÖ Session —Ö–∞–¥–≥–∞–ª–∞–ª—Ç –∞–º–∂–∏–ª—Ç—Ç–∞–π")
        except Exception as e:
            print("‚ùå save_session_state –∞–ª–¥–∞–∞:", e)

        await interaction.followup.send(
            f"üü¢ {team_count} –±–∞–≥—Ç–∞–π, {players_per_team} —Ö“Ø–Ω—Ç—ç–π Session —ç—Ö—ç–ª–ª—ç—ç. `addme` –∫–æ–º–º–∞–Ω–¥–∞–∞—Ä —Ç–æ–≥–ª–æ–≥—á–∏–¥ –±“Ø—Ä—Ç–≥“Ø“Ø–ª–Ω—ç “Ø“Ø."
        )

    except Exception as e:
        print("‚ùå start_match –±“Ø—Ö—ç–ª–¥—ç—ç –≥–∞—Ü–ª–∞–∞:", e)
        await interaction.followup.send("‚ö†Ô∏è Session —ç—Ö–ª“Ø“Ø–ª—ç—Ö—ç–¥ –∞–ª–¥–∞–∞ –≥–∞—Ä–ª–∞–∞.")

@bot.tree.command(name="addme", description="–¢–æ–≥–ª–æ–≥—á ”©”©—Ä–∏–π–≥”©”© –±“Ø—Ä—Ç–≥“Ø“Ø–ª–Ω—ç")
async def addme(interaction: discord.Interaction):
    try:
        await interaction.response.defer(thinking=True)
    except discord.errors.InteractionResponded:
        return

    try:
        user_id = interaction.user.id

        if not GAME_SESSION["active"]:
            await interaction.followup.send("‚ö†Ô∏è –û–¥–æ–æ–≥–æ–æ—Ä session —ç—Ö–ª—ç—ç–≥“Ø–π –±–∞–π–Ω–∞.")
            return

        if user_id in TEAM_SETUP["player_ids"]:
            await interaction.followup.send("üìå –¢–∞ –∞–ª—å —Ö—ç–¥–∏–π–Ω –±“Ø—Ä—Ç–≥“Ø“Ø–ª—Å—ç–Ω –±–∞–π–Ω–∞.")
            return

        TEAM_SETUP["player_ids"].append(user_id)

        try:
            await save_session_state({
                "active": GAME_SESSION["active"],
                "start_time": GAME_SESSION["start_time"].isoformat() if GAME_SESSION["start_time"] else None,
                "last_win_time": GAME_SESSION["last_win_time"].isoformat() if GAME_SESSION["last_win_time"] else None,
                "initiator_id": TEAM_SETUP.get("initiator_id"),
                "team_count": TEAM_SETUP.get("team_count"),
                "players_per_team": TEAM_SETUP.get("players_per_team"),
                "player_ids": TEAM_SETUP.get("player_ids"),
                "teams": TEAM_SETUP.get("teams"),
                "changed_players": TEAM_SETUP.get("changed_players")
            })
            print("‚úÖ addme: session saved")
        except Exception as e:
            print("‚ùå addme: save_session_state –∞–ª–¥–∞–∞:", e)

        await interaction.followup.send(
            f"‚úÖ {interaction.user.mention} –±“Ø—Ä—Ç–≥“Ø“Ø–ª–ª—ç—ç.\n–ù–∏–π—Ç –±“Ø—Ä—Ç–≥—ç–≥–¥—Å—ç–Ω: {len(TEAM_SETUP['player_ids'])}"
        )
    except Exception as e:
        print("‚ùå addme –±“Ø—Ö—ç–ª–¥—ç—ç –∞–ª–¥–∞–∞:", e)
        await interaction.followup.send("‚ö†Ô∏è –ë“Ø—Ä—Ç–≥—ç—Ö “Ø–µ–¥ –∞–ª–¥–∞–∞ –≥–∞—Ä–ª–∞–∞.")

@bot.tree.command(name="show_added_players", description="–ë“Ø—Ä—Ç–≥—ç–≥–¥—Å—ç–Ω —Ç–æ–≥–ª–æ–≥—á–¥—ã–≥ —Ö–∞—Ä—É—É–ª–Ω–∞")
async def show_added_players(interaction: discord.Interaction):
    try:
        await interaction.response.defer(thinking=True)
    except discord.errors.InteractionResponded:
        return

    try:
        session = await load_session_state()
        if not session:
            await interaction.followup.send("‚ö†Ô∏è Session –∞—á–∞–∞–ª–∞—Ö–∞–¥ –∞–ª–¥–∞–∞ –≥–∞—Ä–ª–∞–∞.")
            return

        player_ids = session.get("player_ids", [])
        if not player_ids:
            await interaction.followup.send("üì≠ –û–¥–æ–æ–≥–æ–æ—Ä –±“Ø—Ä—Ç–≥—ç–≥–¥—Å—ç–Ω —Ç–æ–≥–ª–æ–≥—á –∞–ª–≥–∞.")
            return

        guild = interaction.guild
        mentions = []
        for uid in player_ids:
            member = guild.get_member(uid)
            if member:
                try:
                    mentions.append(member.mention)
                except Exception as e:
                    print(f"‚ö†Ô∏è mention –∞–ª–¥–∞–∞ uid={uid}:", e)

        if not mentions:
            await interaction.followup.send("‚ö†Ô∏è Discord —Å–µ—Ä–≤–µ—Ä—ç—ç—Å –Ω—ç—Ä—Å–∏–π–≥ –∞—á–∞–∞–ª–∂ —á–∞–¥—Å–∞–Ω–≥“Ø–π.")
            return

        text = "\n".join(mentions)
        await interaction.followup.send(f"üìã –ë“Ø—Ä—Ç–≥—ç–≥–¥—Å—ç–Ω {len(mentions)} —Ç–æ–≥–ª–æ–≥—á:\n{text}")

    except Exception as e:
        print("‚ùå show_added_players –∞–ª–¥–∞–∞:", e)
        await interaction.followup.send("‚ö†Ô∏è –¢–æ–≥–ª–æ–≥—á–¥—ã–≥ —Ö–∞—Ä—É—É–ª–∞—Ö “Ø–µ–¥ –∞–ª–¥–∞–∞ –≥–∞—Ä–ª–∞–∞.")

@bot.tree.command(name="remove", description="–¢–æ–≥–ª–æ–≥—á ”©”©—Ä–∏–π–≥”©”© –±“Ø—Ä—Ç–≥—ç–ª—ç—ç—Å —Ö–∞—Å–Ω–∞")
async def remove(interaction: discord.Interaction):
    try:
        await interaction.response.defer(ephemeral=True)
    except discord.errors.InteractionResponded:
        return

    try:
        user_id = interaction.user.id

        if not GAME_SESSION["active"]:
            await interaction.followup.send("‚ö†Ô∏è Session –∏–¥—ç–≤—Ö–≥“Ø–π –±–∞–π–Ω–∞.")
            return

        if user_id not in TEAM_SETUP["player_ids"]:
            await interaction.followup.send("‚ùå –¢–∞ –±“Ø—Ä—Ç–≥—ç–ª–¥ –±–∞–π—Ö–≥“Ø–π –±–∞–π–Ω–∞.")
            return

        try:
            TEAM_SETUP["player_ids"].remove(user_id)
        except ValueError:
            print("‚ùå remove: remove() “Ø–µ–¥ –∞–ª–¥–∞–∞ –≥–∞—Ä–ª–∞–∞.")
            await interaction.followup.send("‚ö†Ô∏è –¢–∞ –±“Ø—Ä—Ç–≥—ç–ª—ç—ç—Å –∞–ª—å —Ö—ç–¥–∏–π–Ω —Ö–∞—Å–∞–≥–¥—Å–∞–Ω –±–∞–π–Ω–∞.")
            return

        try:
            await save_session_state({
                "active": GAME_SESSION["active"],
                "start_time": GAME_SESSION["start_time"].isoformat() if GAME_SESSION["start_time"] else None,
                "last_win_time": GAME_SESSION["last_win_time"].isoformat() if GAME_SESSION["last_win_time"] else None,
                "initiator_id": TEAM_SETUP.get("initiator_id"),
                "team_count": TEAM_SETUP.get("team_count"),
                "players_per_team": TEAM_SETUP.get("players_per_team"),
                "player_ids": TEAM_SETUP.get("player_ids"),
                "teams": TEAM_SETUP.get("teams"),
                "changed_players": TEAM_SETUP.get("changed_players")
            })
        except Exception as e:
            print("‚ùå save_session_state –∞–ª–¥–∞–∞:", e)

        await interaction.followup.send(
            f"üóë {interaction.user.mention} –±“Ø—Ä—Ç–≥—ç–ª—ç—ç—Å —Ö–∞—Å–∞–≥–¥–ª–∞–∞.\n“Æ–ª–¥—Å—ç–Ω: **{len(TEAM_SETUP['player_ids'])}** —Ç–æ–≥–ª–æ–≥—á"
        )
    except Exception as e:
        print("‚ùå /remove command –±“Ø—Ö—ç–ª–¥—ç—ç –∞–ª–¥–∞–∞:", e)
        await interaction.followup.send("‚ö†Ô∏è –•–∞—Å–∞—Ö “Ø–µ–¥ –∞–ª–¥–∞–∞ –≥–∞—Ä–ª–∞–∞.")

@bot.tree.command(name="remove_user", description="–ê–¥–º–∏–Ω: —Ç–æ–≥–ª–æ–≥—á–∏–π–≥ –±“Ø—Ä—Ç–≥—ç–ª—ç—ç—Å —Ö–∞—Å–Ω–∞")
@app_commands.describe(mention="–•–∞—Å–∞—Ö —Ç–æ–≥–ª–æ–≥—á–∏–π–≥ mention —Ö–∏–π–Ω—ç")
async def remove_user(interaction: discord.Interaction, mention: str):
    if not interaction.user.guild_permissions.administrator:
        await interaction.response.send_message("‚õîÔ∏è –ó”©–≤—Ö”©–Ω –∞–¥–º–∏–Ω —Ö—ç—Ä—ç–≥–ª—ç–Ω—ç.", ephemeral=True)
        return

    try:
        await interaction.response.defer(ephemeral=True)
    except discord.errors.InteractionResponded:
        return

    try:
        user_ids = [int(word[2:-1].replace("!", "")) for word in mention.split() if word.startswith("<@") and word.endswith(">")]
    except Exception as e:
        print("‚ùå Mention parse –∞–ª–¥–∞–∞:", e)
        await interaction.followup.send("‚ö†Ô∏è Mention parse —Ö–∏–π—Ö—ç–¥ –∞–ª–¥–∞–∞ –≥–∞—Ä–ª–∞–∞.")
        return

    if not user_ids:
        await interaction.followup.send("‚ö†Ô∏è –ó”©–≤ mention —Ö–∏–π–≥—ç—ç–≥“Ø–π –±–∞–π–Ω–∞.")
        return

    removed = 0
    for uid in user_ids:
        try:
            if uid in TEAM_SETUP["player_ids"]:
                TEAM_SETUP["player_ids"].remove(uid)
                removed += 1
        except Exception as e:
            print(f"‚ùå remove_user loop –∞–ª–¥–∞–∞ uid={uid}:", e)

    try:
        await save_session_state({
            "active": GAME_SESSION["active"],
            "start_time": GAME_SESSION["start_time"].isoformat() if GAME_SESSION["start_time"] else None,
            "last_win_time": GAME_SESSION["last_win_time"].isoformat() if GAME_SESSION["last_win_time"] else None,
            "initiator_id": TEAM_SETUP.get("initiator_id"),
            "team_count": TEAM_SETUP.get("team_count"),
            "players_per_team": TEAM_SETUP.get("players_per_team"),
            "player_ids": TEAM_SETUP.get("player_ids"),
            "teams": TEAM_SETUP.get("teams"),
            "changed_players": TEAM_SETUP.get("changed_players")
        })
    except Exception as e:
        print("‚ùå save_session_state –∞–ª–¥–∞–∞:", e)

    if removed == 0:
        await interaction.followup.send("‚ÑπÔ∏è –ë“Ø—Ä—Ç–≥—ç–ª—ç—ç—Å —Ö–∞—Å–∞–≥–¥—Å–∞–Ω —Ç–æ–≥–ª–æ–≥—á –æ–ª–¥—Å–æ–Ω–≥“Ø–π.")
    else:
        await interaction.followup.send(f"üóë {removed} —Ç–æ–≥–ª–æ–≥—á –±“Ø—Ä—Ç–≥—ç–ª—ç—ç—Å —Ö–∞—Å–∞–≥–¥–ª–∞–∞.")

@bot.tree.command(name="set_match", description="–ê–¥–º–∏–Ω: –≥–∞—Ä–∞–∞—Ä –±–∞–≥ –±“Ø—Ä–¥“Ø“Ø–ª–Ω—ç")
@app_commands.describe(team_number="–ë–∞–≥–∏–π–Ω –¥—É–≥–∞–∞—Ä", mentions="–¢–æ–≥–ª–æ–≥—á–¥—ã–≥ mention —Ö–∏–π–Ω—ç")
async def set_match(interaction: discord.Interaction, team_number: int, mentions: str):
    if not interaction.user.guild_permissions.administrator:
        await interaction.response.send_message("‚õîÔ∏è –ó”©–≤—Ö”©–Ω –∞–¥–º–∏–Ω —Ö—ç—Ä—ç–≥–ª—ç–Ω—ç.", ephemeral=True)
        return

    try:
        await interaction.response.defer(ephemeral=True)
    except discord.errors.InteractionResponded:
        return

    try:
        user_ids = [int(word[2:-1].replace("!", "")) for word in mentions.split() if word.startswith("<@") and word.endswith(">")]
    except Exception as e:
        print("‚ùå mention parse –∞–ª–¥–∞–∞:", e)
        await interaction.followup.send("‚ö†Ô∏è Mention parse —Ö–∏–π—Ö—ç–¥ –∞–ª–¥–∞–∞ –≥–∞—Ä–ª–∞–∞.", ephemeral=True)
        return

    if not user_ids:
        await interaction.followup.send("‚ö†Ô∏è –•–∞–º–≥–∏–π–Ω –±–∞–≥–∞–¥–∞–∞ –Ω—ç–≥ —Ç–æ–≥–ª–æ–≥—á mention —Ö–∏–π–Ω—ç “Ø“Ø.", ephemeral=True)
        return

    # üß† Session –∏–¥—ç–≤—Ö–≥“Ø–π –±–æ–ª —à–∏–Ω—ç—á–∏–ª–Ω—ç
    if not GAME_SESSION["active"]:
        now = datetime.now(timezone.utc)
        GAME_SESSION["active"] = True
        GAME_SESSION["start_time"] = now
        GAME_SESSION["last_win_time"] = now

    # ‚ö†Ô∏è –î–∞–≤—Ö–∞—Ä–¥–∞–ª —à–∞–ª–≥–∞–Ω–∞
    all_existing_ids = [uid for team in TEAM_SETUP.get("teams", []) for uid in team]
    duplicate_ids = [uid for uid in user_ids if uid in all_existing_ids]
    if duplicate_ids:
        await interaction.followup.send("üö´ –ó–∞—Ä–∏–º —Ç–æ–≥–ª–æ–≥—á –∞–ª—å –Ω—ç–≥ –±–∞–≥—Ç –±“Ø—Ä—Ç–≥—ç–≥–¥—Å—ç–Ω –±–∞–π–Ω–∞.", ephemeral=True)
        return

    # üîß teams[] –±–∞–π—Ö–≥“Ø–π –±–æ–ª “Ø“Ø—Å–≥—ç–Ω—ç
    while len(TEAM_SETUP.setdefault("teams", [])) < team_number:
        TEAM_SETUP["teams"].append([])

    TEAM_SETUP.setdefault("team_count", team_number)
    TEAM_SETUP.setdefault("players_per_team", 5)
    TEAM_SETUP.setdefault("changed_players", [])
    TEAM_SETUP.setdefault("player_ids", [])
    TEAM_SETUP.setdefault("initiator_id", interaction.user.id)

    TEAM_SETUP["teams"][team_number - 1] = user_ids

    try:
        await save_session_state({
            "active": GAME_SESSION["active"],
            "start_time": GAME_SESSION["start_time"].isoformat() if GAME_SESSION["start_time"] else None,
            "last_win_time": GAME_SESSION["last_win_time"].isoformat() if GAME_SESSION["last_win_time"] else None,
            "initiator_id": TEAM_SETUP.get("initiator_id"),
            "team_count": TEAM_SETUP.get("team_count"),
            "players_per_team": TEAM_SETUP.get("players_per_team"),
            "player_ids": TEAM_SETUP.get("player_ids"),
            "teams": TEAM_SETUP.get("teams"),
            "changed_players": TEAM_SETUP.get("changed_players")
        })
    except Exception as e:
        print("‚ùå save_session_state –∞–ª–¥–∞–∞:", e)

    await interaction.followup.send(f"‚úÖ {len(user_ids)} —Ç–æ–≥–ª–æ–≥—á–∏–π–≥ {team_number}-—Ä –±–∞–≥—Ç –±“Ø—Ä—Ç–≥—ç–ª—ç—ç.")
    return

@bot.tree.command(name="clear_match", description="–ê–¥–º–∏–Ω: –æ–¥–æ–æ–≥–∏–π–Ω –∏–¥—ç–≤—Ö—Ç—ç–π match-–∏–π–Ω –±–∞–≥ –±“Ø—Ä—Ç–≥—ç–ª–∏–π–≥ —Ü—ç–≤—ç—Ä–ª—ç–Ω—ç")
async def clear_match(interaction: discord.Interaction):
    if not interaction.user.guild_permissions.administrator:
        await interaction.response.send_message("‚õîÔ∏è –ó”©–≤—Ö”©–Ω –∞–¥–º–∏–Ω —Ö—ç—Ä—ç–≥–ª—ç–Ω—ç.", ephemeral=True)
        return

    try:
        await interaction.response.defer(thinking=True)
    except discord.errors.InteractionResponded:
        return

    try:
        # üßπ Match session –±–æ–ª–æ–Ω –±–∞–≥—É—É–¥—ã–≥ —Ü—ç–≤—ç—Ä–ª—ç–Ω—ç
        TEAM_SETUP["teams"] = []
        TEAM_SETUP["player_ids"] = []
        TEAM_SETUP["changed_players"] = []
        TEAM_SETUP["initiator_id"] = None

        GAME_SESSION["active"] = False
        GAME_SESSION["start_time"] = None
        GAME_SESSION["last_win_time"] = None

        # ‚úÖ SQL-–¥ —Ö–∞–¥–≥–∞–ª–Ω–∞
        try:
            await save_session_state({
                "active": False,
                "start_time": None,
                "last_win_time": None,
                "initiator_id": None,
                "team_count": TEAM_SETUP.get("team_count"),
                "players_per_team": TEAM_SETUP.get("players_per_team"),
                "player_ids": [],
                "teams": [],
                "changed_players": []
            })
            print("‚úÖ Session clear —Ö–∞–¥–≥–∞–ª–∞–ª—Ç –∞–º–∂–∏–ª—Ç—Ç–∞–π")
        except Exception as e:
            print("‚ùå clear_match: save_session_state –∞–ª–¥–∞–∞:", e)

        await interaction.followup.send(
            "üßº Match-–∏–π–Ω –±“Ø—Ä—Ç–≥—ç–ª –∞–º–∂–∏–ª—Ç—Ç–∞–π —Ü—ç–≤—ç—Ä–ª—ç–≥–¥–ª—ç—ç.\n‚úÖ Session —Ö–∞–¥–≥–∞–ª–∞–≥–¥–ª–∞–∞."
        )

    except Exception as e:
        print("‚ùå clear_match –±“Ø—Ö—ç–ª–¥—ç—ç –∞–ª–¥–∞–∞:", e)
        await interaction.followup.send("‚ö†Ô∏è Match —Ü—ç–≤—ç—Ä–ª—ç—Ö “Ø–µ–¥ –∞–ª–¥–∞–∞ –≥–∞—Ä–ª–∞–∞.")

@bot.tree.command(name="go_bot", description="–û–Ω–æ–æ–Ω—ã –¥–∞–≥—É—É —Ç—ç–Ω—Ü–≤—ç—Ä—Ç—ç–π –±–∞–≥ —Ö—É–≤–∞–∞—Ä–∏–ª–Ω–∞")
async def go_bot(interaction: discord.Interaction):
    try:
        await interaction.response.defer(thinking=True)
    except discord.errors.InteractionResponded:
        return

    is_admin = interaction.user.guild_permissions.administrator
    is_initiator = interaction.user.id == TEAM_SETUP.get("initiator_id")
    if not (is_admin or is_initiator):
        await interaction.followup.send("‚õîÔ∏è –ó”©–≤—Ö”©–Ω –∞–¥–º–∏–Ω —ç—Å–≤—ç–ª session —ç—Ö–ª“Ø“Ø–ª—Å—ç–Ω —Ö“Ø–Ω –∞–∂–∏–ª–ª—É—É–ª–∂ —á–∞–¥–Ω–∞.", ephemeral=True)
        return

    if not GAME_SESSION["active"]:
        await interaction.followup.send("‚ö†Ô∏è Session –∏–¥—ç–≤—Ö–≥“Ø–π –±–∞–π–Ω–∞.", ephemeral=True)
        return

    team_count = TEAM_SETUP["team_count"]
    players_per_team = TEAM_SETUP["players_per_team"]
    total_slots = team_count * players_per_team
    player_ids = TEAM_SETUP["player_ids"]

    if not player_ids:
        await interaction.followup.send("‚ö†Ô∏è –ë“Ø—Ä—Ç–≥—ç–≥–¥—Å—ç–Ω —Ç–æ–≥–ª–æ–≥—á –∞–ª–≥–∞ –±–∞–π–Ω–∞.", ephemeral=True)
        return

    # ‚úÖ –ñ–∏–Ω —Ç–æ–æ—Ü–æ—Ö
    weights_all = {}
    for uid in player_ids:
        data = await get_score(uid)
        if data:
            weights_all[uid] = calculate_weight(data)

    # üéØ Top N —Ç–æ–≥–ª–æ–≥—á
    sorted_players = sorted(weights_all.items(), key=lambda x: x[1], reverse=True)
    trimmed_players = sorted_players[:total_slots]
    player_weights = dict(trimmed_players)
    left_out_players = sorted_players[total_slots:]

    # üß† 3 —Ç”©—Ä–ª–∏–π–Ω —Ö—É–≤–∞–∞—Ä–∏–ª–∞–ª—Ç
    snake = snake_teams(player_weights, team_count, players_per_team)
    greedy = greedy_teams(player_weights, team_count, players_per_team)
    reflector = reflector_teams(player_weights, team_count, players_per_team)

    strategy_diffs = {
        "snake": (snake, total_weight_difference(snake, player_weights)),
        "greedy": (greedy, total_weight_difference(greedy, player_weights)),
        "reflector": (reflector, total_weight_difference(reflector, player_weights))
    }

    strategy, (best_teams, best_diff) = min(strategy_diffs.items(), key=lambda x: x[1][1])
    TEAM_SETUP["teams"] = best_teams
    TEAM_SETUP["strategy"] = strategy
    GAME_SESSION["last_win_time"] = datetime.now(timezone.utc)

    # üíæ Session —Ö–∞–¥–≥–∞–ª–∞—Ö
    try:
        await save_session_state({
            "active": GAME_SESSION["active"],
            "start_time": GAME_SESSION["start_time"].isoformat() if GAME_SESSION["start_time"] else None,
            "last_win_time": GAME_SESSION["last_win_time"].isoformat() if GAME_SESSION["last_win_time"] else None,
            "initiator_id": TEAM_SETUP.get("initiator_id"),
            "team_count": TEAM_SETUP.get("team_count"),
            "players_per_team": TEAM_SETUP.get("players_per_team"),
            "player_ids": TEAM_SETUP.get("player_ids"),
            "teams": TEAM_SETUP.get("teams"),
            "changed_players": TEAM_SETUP.get("changed_players", []),
            "strategy": TEAM_SETUP.get("strategy", "")
        })
    except Exception as e:
        print("‚ùå save_session_state –∞–ª–¥–∞–∞ /go_bot:", e)

    # üìã –ú–µ—Å—Å–µ–∂ —Ñ–æ—Ä–º–∞—Ç
    guild = interaction.guild
    lines = [f"‚úÖ `{strategy}` —Ö—É–≤–∞–∞—Ä–∏–ª–∞–ª—Ç –∞—à–∏–≥–ª–∞–≤ (–æ–Ω–æ–æ–Ω—ã –∑”©—Ä“Ø“Ø: `{best_diff}`)\n"]
    for i, team in enumerate(best_teams, start=1):
        total = sum(player_weights.get(uid, 0) for uid in team)
        leader = max(team, key=lambda uid: player_weights.get(uid, 0))
        leader_name = guild.get_member(leader).display_name if guild.get_member(leader) else str(leader)
        lines.append(f"# {i}-—Ä –±–∞–≥ (–Ω–∏–π—Ç –æ–Ω–æ–æ: {total})\n")
        for uid in team:
            member = guild.get_member(uid)
            name = member.display_name if member else str(uid)
            score = player_weights.get(uid, 0)
            lines.append(f"{name} ({score})" + (" üòé Team Leader\n" if uid == leader else "\n"))
        lines.append("\n")

    if left_out_players:
        out = "\n‚Ä¢ ".join(f"<@{uid}>" for uid, _ in left_out_players)
        lines.append(f"‚ö†Ô∏è **–î–∞—Ä–∞–∞—Ö —Ç–æ–≥–ª–æ–≥—á–∏–¥ —ç–Ω—ç —É–¥–∞–∞–¥ –±–∞–≥—Ç –æ—Ä—Å–æ–Ω–≥“Ø–π:**\n‚Ä¢ {out}")

    is_ranked = players_per_team in [4, 5] and team_count >= 2
    lines.append("\n" + ("üèÖ –≠–Ω—ç match: **Ranked** ‚úÖ (–æ–Ω–æ–æ —Ç–æ–æ—Ü–Ω–æ)" if is_ranked else "‚ö†Ô∏è –≠–Ω—ç match: **Ranked –±–∏—à** ‚ùå"))

    await interaction.followup.send("".join(lines))
    await interaction.followup.send("‚úÖ Match –±“Ø—Ä—Ç–≥—ç–≥–¥–ª—ç—ç.")


@bot.tree.command(name="go_gpt", description="GPT-—ç—ç—Ä –æ–Ω–æ–æ–Ω—ã –±–∞–ª–∞–Ω—Å —Ö–∏–π–∂ –±–∞–≥ —Ö—É–≤–∞–∞—Ä–∏–ª–Ω–∞")
async def go_gpt(interaction: discord.Interaction):
    is_admin = interaction.user.guild_permissions.administrator
    is_initiator = interaction.user.id == TEAM_SETUP.get("initiator_id")

    if not (is_admin or is_initiator):
        await interaction.response.send_message("‚ùå –ó”©–≤—Ö”©–Ω admin —ç—Å–≤—ç–ª —Ç–æ—Ö–∏—Ä–≥–æ–æ–≥ —ç—Ö–ª“Ø“Ø–ª—Å—ç–Ω —Ö“Ø–Ω –∞–∂–∏–ª–ª—É—É–ª–∂ —á–∞–¥–Ω–∞.", ephemeral=True)
        return

    try:
        await interaction.response.defer(thinking=True)
    except discord.errors.InteractionResponded:
        return

    if not GAME_SESSION["active"]:
        await interaction.followup.send("‚ö†Ô∏è Session –∏–¥—ç–≤—Ö–≥“Ø–π –±–∞–π–Ω–∞.", ephemeral=True)
        return

    team_count = TEAM_SETUP["team_count"]
    players_per_team = TEAM_SETUP["players_per_team"]
    total_slots = team_count * players_per_team
    player_ids = TEAM_SETUP["player_ids"]

    all_scores = []
    for uid in player_ids:
        data = await get_score(uid)
        if data:
            power = TIER_WEIGHT.get(data.get("tier", "4-1"), 0) + data.get("score", 0)
            all_scores.append({"id": uid, "power": power})

    sorted_players = sorted(all_scores, key=lambda x: x["power"], reverse=True)
    selected_players = sorted_players[:total_slots]
    left_out_players = sorted_players[total_slots:]
    score_map = {p["id"]: p["power"] for p in selected_players}

    try:
        teams = call_gpt_balance_api(team_count, players_per_team, selected_players)
    except Exception as e:
        print("‚ùå GPT API error:", e)
        await interaction.followup.send(
            "‚ö†Ô∏è GPT-—ç—ç—Ä –±–∞–≥ —Ö—É–≤–∞–∞—Ä–∏–ª–∞—Ö “Ø–µ–¥ –∞–ª–¥–∞–∞ –≥–∞—Ä–ª–∞–∞. –¢“Ø—Ä –∑—É—É—Ä—ã–Ω –∞—Å—É—É–¥–∞–ª –±–∞–π–∂ –±–æ–ª–∑–æ—à–≥“Ø–π.\n"
            "‚è≥ –î–∞—Ä–∞–∞ –¥–∞—Ö–∏–Ω –æ—Ä–æ–ª–¥–æ–Ω–æ —É—É —ç—Å–≤—ç–ª `/go_bot` –∫–æ–º–∞–Ω–¥—ã–≥ –∞—à–∏–≥–ª–∞–∞—Ä–∞–π."
        )
        return

    TEAM_SETUP["teams"] = teams
    TEAM_SETUP["strategy"] = "gpt"
    GAME_SESSION["last_win_time"] = datetime.now(timezone.utc)

    await save_session_state({
        "active": GAME_SESSION["active"],
        "start_time": GAME_SESSION["start_time"].isoformat() if GAME_SESSION["start_time"] else None,
        "last_win_time": GAME_SESSION["last_win_time"].isoformat() if GAME_SESSION["last_win_time"] else None,
        "initiator_id": TEAM_SETUP.get("initiator_id"),
        "team_count": TEAM_SETUP.get("team_count"),
        "players_per_team": TEAM_SETUP.get("players_per_team"),
        "player_ids": TEAM_SETUP.get("player_ids"),
        "teams": TEAM_SETUP.get("teams"),
        "changed_players": TEAM_SETUP.get("changed_players"),
        "strategy": "gpt"
    })

    # üìã Message format
    guild = interaction.guild
    team_emojis = ["ü•á", "ü•à", "ü•â", "üéØ", "üî•", "üöÄ", "üéÆ", "üõ°Ô∏è", "‚öîÔ∏è", "üß†"]
    used_ids = set(uid for team in teams for uid in team)

    lines = ["ü§ñ **ChatGPT-—ç—ç—Ä —Ç—ç–Ω—Ü–≤—ç—Ä–∂“Ø“Ø–ª—Å—ç–Ω –±–∞–≥—É—É–¥:**"]
    for i, team in enumerate(teams):
        emoji = team_emojis[i % len(team_emojis)]
        team_total = sum(score_map.get(uid, 0) for uid in team)
        leader_uid = max(team, key=lambda uid: score_map.get(uid, 0))
        leader_name = guild.get_member(leader_uid).display_name if guild.get_member(leader_uid) else str(leader_uid)

        lines.append(f"\n{emoji} **#{i+1}-—Ä –±–∞–≥** (–Ω–∏–π—Ç –æ–Ω–æ–æ: {team_total}) üòé\n")
        for uid in team:
            member = guild.get_member(uid)
            name = member.display_name if member else f"{uid}"
            weight = score_map.get(uid, 0)
            if uid == leader_uid:
                lines.append(f"{name} ({weight}) üòé Team Leader\n")
            else:
                lines.append(f"{name} ({weight})\n")

    if left_out_players:
        mentions = "\n‚Ä¢ ".join(f"<@{p['id']}>" for p in left_out_players)
        lines.append(f"\n‚ö†Ô∏è **–î–∞—Ä–∞–∞—Ö —Ç–æ–≥–ª–æ–≥—á–∏–¥ —ç–Ω—ç —É–¥–∞–∞–¥ –±–∞–≥—Ç –æ—Ä—Å–æ–Ω–≥“Ø–π:**\n‚Ä¢ {mentions}")

    await interaction.followup.send("".join(lines))
    await interaction.followup.send("‚úÖ Match –±“Ø—Ä—Ç–≥—ç–≥–¥–ª—ç—ç.")

@bot.tree.command(name="set_match_result", description="Match –±“Ø—Ä—Ç–≥—ç–Ω—ç, +1/-1 –æ–Ω–æ–æ, tier ”©”©—Ä—á–∏–ª–Ω”©")
@app_commands.describe(
    winner_teams="–Ø–ª—Å–∞–Ω –±–∞–≥—É—É–¥—ã–Ω –¥—É–≥–∞–∞—Ä—É—É–¥ (–∂–∏—à—ç—ç: 1 3)",
    loser_teams="–Ø–ª–∞–≥–¥—Å–∞–Ω –±–∞–≥—É—É–¥—ã–Ω –¥—É–≥–∞–∞—Ä—É—É–¥ (–∂–∏—à—ç—ç: 2 4)"
)
async def set_match_result(interaction: discord.Interaction, winner_teams: str, loser_teams: str):
    try:
        await interaction.response.defer(thinking=True)
    except discord.errors.InteractionResponded:
        return

    if not (TEAM_SETUP.get("players_per_team") in [4, 5] and TEAM_SETUP.get("team_count", 0) >= 2):
        await interaction.followup.send("‚ö†Ô∏è –≠–Ω—ç match –Ω—å 4v4/5v5 –±–∏—à —Ç—É–ª –æ–Ω–æ–æ —Ç–æ–æ—Ü–æ—Ö–≥“Ø–π.")
        return

    if not GAME_SESSION["active"] or not TEAM_SETUP.get("teams"):
        await interaction.followup.send("‚ö†Ô∏è Session –∏–¥—ç–≤—Ö–≥“Ø–π —ç—Å–≤—ç–ª –±–∞–≥—É—É–¥ –±“Ø—Ä–¥—ç—ç–≥“Ø–π –±–∞–π–Ω–∞.")
        return

    is_admin = interaction.user.guild_permissions.administrator
    is_initiator = interaction.user.id == TEAM_SETUP.get("initiator_id")
    if not (is_admin or is_initiator):
        await interaction.followup.send("‚õîÔ∏è –ó”©–≤—Ö”©–Ω –∞–¥–º–∏–Ω —ç—Å–≤—ç–ª session —ç—Ö–ª“Ø“Ø–ª—Å—ç–Ω —Ö“Ø–Ω –∞–∂–∏–ª–ª—É—É–ª–∂ —á–∞–¥–Ω–∞.")
        return

    try:
        win_indexes = [int(x.strip()) - 1 for x in winner_teams.strip().split()]
        lose_indexes = [int(x.strip()) - 1 for x in loser_teams.strip().split()]
    except ValueError:
        await interaction.followup.send("‚ö†Ô∏è –ë–∞–≥–∏–π–Ω –¥—É–≥–∞–∞—Ä—É—É–¥—ã–≥ –∑”©–≤ –æ—Ä—É—É–ª–Ω–∞ —É—É (–∂: 1 3)")
        return

    all_teams = TEAM_SETUP["teams"]
    if any(i < 0 or i >= len(all_teams) for i in win_indexes + lose_indexes):
        await interaction.followup.send("‚ö†Ô∏è –ë–∞–≥–∏–π–Ω –¥—É–≥–∞–∞—Ä –±—É—Ä—É—É –±–∞–π–Ω–∞.")
        return

    winners = [uid for i in win_indexes for uid in all_teams[i]]
    losers = [uid for i in lose_indexes for uid in all_teams[i]]
    now = datetime.now(timezone.utc)
    guild = interaction.guild

    def validate_tier(tier): return tier if tier in TIER_ORDER else "4-1"

    def adjust_score(data, delta):
        data["score"] += delta
        if data["score"] >= 5:
            if TIER_ORDER.index(data["tier"]) + 1 < len(TIER_ORDER):
                data["tier"] = TIER_ORDER[TIER_ORDER.index(data["tier"]) + 1]
            data["score"] = 0
        elif data["score"] <= -5:
            if TIER_ORDER.index(data["tier"]) - 1 >= 0:
                data["tier"] = TIER_ORDER[TIER_ORDER.index(data["tier"]) - 1]
            data["score"] = 0
        return data

    winner_details, loser_details = [], []

    for uid in winners:
        try:
            data = await get_score(uid) or get_default_tier()
            old_score, old_tier = data["score"], data["tier"]
            data["tier"] = validate_tier(data["tier"])
            data = adjust_score(data, +1)
            member = guild.get_member(uid)
            data["username"] = member.display_name if member else "Unknown"
            await upsert_score(uid, data["score"], data["tier"], data["username"])
            await log_score_transaction(uid, +1, data["score"], data["tier"], "set_match_result")
            await update_player_stats(uid, is_win=True)
            winner_details.append({
                "uid": uid, "username": data["username"],
                "team": next((i+1 for i, team in enumerate(all_teams) if uid in team), None),
                "old_score": old_score, "new_score": data["score"],
                "old_tier": old_tier, "new_tier": data["tier"]
            })
        except Exception as e:
            print(f"‚ùå Winner uid:{uid} update fail:", e)

    for uid in losers:
        try:
            data = await get_score(uid) or get_default_tier()
            old_score, old_tier = data["score"], data["tier"]
            data["tier"] = validate_tier(data["tier"])
            data = adjust_score(data, -1)
            member = guild.get_member(uid)
            data["username"] = member.display_name if member else "Unknown"
            await upsert_score(uid, data["score"], data["tier"], data["username"])
            await log_score_transaction(uid, -1, data["score"], data["tier"], "set_match_result")
            await update_player_stats(uid, is_win=False)
            loser_details.append({
                "uid": uid, "username": data["username"],
                "team": next((i+1 for i, team in enumerate(all_teams) if uid in team), None),
                "old_score": old_score, "new_score": data["score"],
                "old_tier": old_tier, "new_tier": data["tier"]
            })
        except Exception as e:
            print(f"‚ùå Loser uid:{uid} update fail:", e)

    try:
        await update_nicknames_for_users(guild, [p["uid"] for p in winner_details + loser_details])
    except Exception as e:
        print("‚ö†Ô∏è nickname update error:", e)

    try:
        await save_last_match(winners, losers)
    except Exception as e:
        print("‚ö†Ô∏è save_last_match –∞–ª–¥–∞–∞:", e)

    GAME_SESSION["last_win_time"] = now

    lines = [f"üèÜ {', '.join(str(i+1) for i in win_indexes)} —è–ª—Å–∞–Ω, {', '.join(str(i+1) for i in lose_indexes)} —è–ª–∞–≥–¥—Å–∞–Ω. Tier/–æ–Ω–æ–æ —à–∏–Ω—ç—á–ª—ç–≥–¥–ª—ç—ç.\n"]

    for p in winner_details + loser_details:
        old_idx = TIER_ORDER.index(p["old_tier"])
        new_idx = TIER_ORDER.index(p["new_tier"])
        change = " ‚¨Ü" if new_idx > old_idx else (" ‚¨á" if new_idx < old_idx else "")
        prefix = "‚úÖ" if p in winner_details else "üíÄ"
        lines.append(f"{prefix} <@{p['uid']}>: {p['old_score']} ‚Üí {p['new_score']} (Tier: {p['old_tier']} ‚Üí {p['new_tier']}){change}")

    try:
        await insert_match(
            timestamp=now,
            initiator_id=TEAM_SETUP.get("initiator_id", 0),
            team_count=TEAM_SETUP.get("team_count", 2),
            players_per_team=TEAM_SETUP.get("players_per_team", 5),
            winners=winners,
            losers=losers,
            mode="manual",
            strategy="NormalMatch",
            notes="set_match_result"
        )
    except Exception as e:
        print("‚ùå insert_match –∞–ª–¥–∞–∞:", e)

    try:
        await interaction.followup.send("\n".join(lines) + "\n‚úÖ Match –±“Ø—Ä—Ç–≥—ç–≥–¥–ª—ç—ç.")
    except Exception as e:
        print("‚ùå followup send –∞–ª–¥–∞–∞:", e)

    try:
        await save_session_state({
            "active": GAME_SESSION["active"],
            "start_time": GAME_SESSION["start_time"].isoformat() if GAME_SESSION["start_time"] else None,
            "last_win_time": GAME_SESSION["last_win_time"].isoformat() if GAME_SESSION["last_win_time"] else None,
            "initiator_id": TEAM_SETUP.get("initiator_id"),
            "team_count": TEAM_SETUP.get("team_count"),
            "players_per_team": TEAM_SETUP.get("players_per_team"),
            "player_ids": TEAM_SETUP.get("player_ids"),
            "teams": TEAM_SETUP.get("teams"),
            "changed_players": TEAM_SETUP.get("changed_players"),
            "strategy": TEAM_SETUP.get("strategy", "")
        })
    except Exception as e:
        print("‚ùå session save –∞–ª–¥–∞–∞:", e)

@bot.tree.command(name="set_match_result_fountain", description="Fountain match –±“Ø—Ä—Ç–≥—ç–Ω—ç, +2/-2 –æ–Ω–æ–æ, tier ”©”©—Ä—á–∏–ª–Ω”©")
@app_commands.describe(
    winner_teams="–Ø–ª—Å–∞–Ω –±–∞–≥—É—É–¥—ã–Ω –¥—É–≥–∞–∞—Ä—É—É–¥ (–∂–∏—à—ç—ç: 1 3)",
    loser_teams="–Ø–ª–∞–≥–¥—Å–∞–Ω –±–∞–≥—É—É–¥—ã–Ω –¥—É–≥–∞–∞—Ä—É—É–¥ (–∂–∏—à—ç—ç: 2 4)"
)
async def set_match_result_fountain(interaction: discord.Interaction, winner_teams: str, loser_teams: str):
    try:
        await interaction.response.defer(thinking=True)
    except discord.errors.InteractionResponded:
        return

    if not (TEAM_SETUP.get("players_per_team") in [4, 5] and TEAM_SETUP.get("team_count", 0) >= 2):
        await interaction.followup.send("‚ö†Ô∏è –≠–Ω—ç match –Ω—å 4v4/5v5 –±–∏—à —Ç—É–ª –æ–Ω–æ–æ —Ç–æ–æ—Ü–æ—Ö–≥“Ø–π.")
        return

    if not GAME_SESSION["active"] or not TEAM_SETUP.get("teams"):
        await interaction.followup.send("‚ö†Ô∏è Session –∏–¥—ç–≤—Ö–≥“Ø–π —ç—Å–≤—ç–ª –±–∞–≥—É—É–¥ –±“Ø—Ä–¥—ç—ç–≥“Ø–π –±–∞–π–Ω–∞.")
        return

    is_admin = interaction.user.guild_permissions.administrator
    is_initiator = interaction.user.id == TEAM_SETUP.get("initiator_id")
    if not (is_admin or is_initiator):
        await interaction.followup.send("‚õîÔ∏è –ó”©–≤—Ö”©–Ω –∞–¥–º–∏–Ω —ç—Å–≤—ç–ª session —ç—Ö–ª“Ø“Ø–ª—Å—ç–Ω —Ö“Ø–Ω –∞–∂–∏–ª–ª—É—É–ª–∂ —á–∞–¥–Ω–∞.")
        return

    try:
        win_indexes = [int(x.strip()) - 1 for x in winner_teams.strip().split()]
        lose_indexes = [int(x.strip()) - 1 for x in loser_teams.strip().split()]
    except ValueError:
        await interaction.followup.send("‚ö†Ô∏è –ë–∞–≥–∏–π–Ω –¥—É–≥–∞–∞—Ä—É—É–¥—ã–≥ –∑”©–≤ –æ—Ä—É—É–ª–Ω–∞ —É—É (–∂: 1 3)")
        return

    all_teams = TEAM_SETUP["teams"]
    if any(i < 0 or i >= len(all_teams) for i in win_indexes + lose_indexes):
        await interaction.followup.send("‚ö†Ô∏è –ë–∞–≥–∏–π–Ω –¥—É–≥–∞–∞—Ä –±—É—Ä—É—É –±–∞–π–Ω–∞.")
        return

    winners = [uid for i in win_indexes for uid in all_teams[i]]
    losers = [uid for i in lose_indexes for uid in all_teams[i]]
    now = datetime.now(timezone.utc)
    guild = interaction.guild

    def validate_tier(tier): return tier if tier in TIER_ORDER else "4-1"

    def adjust_score(data, delta):
        data["score"] += delta
        if data["score"] >= 5:
            if TIER_ORDER.index(data["tier"]) + 1 < len(TIER_ORDER):
                data["tier"] = TIER_ORDER[TIER_ORDER.index(data["tier"]) + 1]
            data["score"] = 0
        elif data["score"] <= -5:
            if TIER_ORDER.index(data["tier"]) - 1 >= 0:
                data["tier"] = TIER_ORDER[TIER_ORDER.index(data["tier"]) - 1]
            data["score"] = 0
        return data

    winner_details, loser_details = [], []

    for uid in winners:
        try:
            data = await get_score(uid) or get_default_tier()
            old_score, old_tier = data["score"], data["tier"]
            data["tier"] = validate_tier(data["tier"])
            data = adjust_score(data, +2)
            member = guild.get_member(uid)
            data["username"] = member.display_name if member else "Unknown"
            await upsert_score(uid, data["score"], data["tier"], data["username"])
            await log_score_transaction(uid, +2, data["score"], data["tier"], "fountain")
            await update_player_stats(uid, is_win=True)
            winner_details.append({
                "uid": uid, "username": data["username"],
                "team": next((i+1 for i, team in enumerate(all_teams) if uid in team), None),
                "old_score": old_score, "new_score": data["score"],
                "old_tier": old_tier, "new_tier": data["tier"]
            })
        except Exception as e:
            print(f"‚ùå Winner uid:{uid} update fail:", e)

    for uid in losers:
        try:
            data = await get_score(uid) or get_default_tier()
            old_score, old_tier = data["score"], data["tier"]
            data["tier"] = validate_tier(data["tier"])
            data = adjust_score(data, -2)
            member = guild.get_member(uid)
            data["username"] = member.display_name if member else "Unknown"
            await upsert_score(uid, data["score"], data["tier"], data["username"])
            await log_score_transaction(uid, -2, data["score"], data["tier"], "fountain")
            await update_player_stats(uid, is_win=False)
            loser_details.append({
                "uid": uid, "username": data["username"],
                "team": next((i+1 for i, team in enumerate(all_teams) if uid in team), None),
                "old_score": old_score, "new_score": data["score"],
                "old_tier": old_tier, "new_tier": data["tier"]
            })
        except Exception as e:
            print(f"‚ùå Loser uid:{uid} update fail:", e)

    try:
        await update_nicknames_for_users(guild, [p["uid"] for p in winner_details + loser_details])
    except Exception as e:
        print("‚ö†Ô∏è nickname update error:", e)

    try:
        await save_last_match(winners, losers)
    except Exception as e:
        print("‚ö†Ô∏è save_last_match –∞–ª–¥–∞–∞:", e)

    GAME_SESSION["last_win_time"] = now

    win_str = " ".join(str(i+1) for i in win_indexes)
    lose_str = " ".join(str(i+1) for i in lose_indexes)
    lines = [f"üí¶ {win_str}-—Ä –±–∞–≥(—É—É–¥) **Fountain —è–ª–∂** {lose_str}-—Ä –±–∞–≥ —è–ª–∞–≥–¥–ª–∞–∞.\n–û–Ω–æ–æ, tier —à–∏–Ω—ç—á–ª—ç–≥–¥–ª—ç—ç.\n"]

    for p in winner_details + loser_details:
        old = TIER_ORDER.index(p["old_tier"])
        new = TIER_ORDER.index(p["new_tier"])
        change = " ‚¨Ü" if new > old else (" ‚¨á" if new < old else "")
        prefix = "‚úÖ" if p in winner_details else "üíÄ"
        lines.append(f"{prefix} <@{p['uid']}>: {p['old_score']} ‚Üí {p['new_score']} (Tier: {p['old_tier']} ‚Üí {p['new_tier']}){change}")

    try:
        await insert_match(
            timestamp=now,
            initiator_id=TEAM_SETUP.get("initiator_id", 0),
            team_count=TEAM_SETUP.get("team_count", 2),
            players_per_team=TEAM_SETUP.get("players_per_team", 5),
            winners=winners,
            losers=losers,
            mode="manual",
            strategy="fountain",
            notes="set_match_result_fountain"
        )
    except Exception as e:
        print("‚ùå insert_match –∞–ª–¥–∞–∞:", e)

    try:
        await interaction.followup.send("\n".join(lines) + "\n‚úÖ Match –±“Ø—Ä—Ç–≥—ç–≥–¥–ª—ç—ç.")
    except Exception as e:
        print("‚ùå followup send –∞–ª–¥–∞–∞:", e)

    try:
        await save_session_state({
            "active": GAME_SESSION["active"],
            "start_time": GAME_SESSION["start_time"].isoformat() if GAME_SESSION["start_time"] else None,
            "last_win_time": GAME_SESSION["last_win_time"].isoformat() if GAME_SESSION["last_win_time"] else None,
            "initiator_id": TEAM_SETUP.get("initiator_id"),
            "team_count": TEAM_SETUP.get("team_count"),
            "players_per_team": TEAM_SETUP.get("players_per_team"),
            "player_ids": TEAM_SETUP.get("player_ids"),
            "teams": TEAM_SETUP.get("teams"),
            "changed_players": TEAM_SETUP.get("changed_players"),
            "strategy": TEAM_SETUP.get("strategy", "")
        })
    except Exception as e:
        print("‚ùå session save –∞–ª–¥–∞–∞:", e)

@bot.tree.command(name="change_player", description="–ë–∞–≥–∏–π–Ω –≥–∏—à“Ø“Ø–¥–∏–π–≥ —Å–æ–ª–∏—Ö")
@app_commands.describe(
    from_user="–ì–∞—Ä–∞—Ö —Ç–æ–≥–ª–æ–≥—á (@mention)",
    to_user="–û—Ä–æ—Ö —Ç–æ–≥–ª–æ–≥—á (@mention)"
)
async def change_player(interaction: discord.Interaction, from_user: discord.Member, to_user: discord.Member):
    try:
        await interaction.response.defer(thinking=True)
    except discord.errors.InteractionResponded:
        return

    if not GAME_SESSION["active"] or not TEAM_SETUP.get("teams"):
        await interaction.followup.send("‚ö†Ô∏è Session –∏–¥—ç–≤—Ö–≥“Ø–π —ç—Å–≤—ç–ª –±–∞–≥ –±“Ø—Ä–¥—ç—ç–≥“Ø–π –±–∞–π–Ω–∞.", ephemeral=True)
        return

    is_admin = interaction.user.guild_permissions.administrator
    is_initiator = interaction.user.id == TEAM_SETUP.get("initiator_id")
    if not (is_admin or is_initiator):
        await interaction.followup.send("‚õîÔ∏è –ó”©–≤—Ö”©–Ω –∞–¥–º–∏–Ω —ç—Å–≤—ç–ª session —ç—Ö–ª“Ø“Ø–ª—Å—ç–Ω —Ö“Ø–Ω —Å–æ–ª—å–∂ —á–∞–¥–Ω–∞.", ephemeral=True)
        return

    from_uid = from_user.id
    to_uid = to_user.id
    teams = TEAM_SETUP["teams"]

    from_team_index = None

    # üîé from_user-–≥ –±–∞–≥ –¥–æ—Ç—Ä–æ–æ—Å –æ–ª–æ—Ö
    for i, team in enumerate(teams):
        if from_uid in team:
            from_team_index = i
            team.remove(from_uid)
            break

    if from_team_index is None:
        await interaction.followup.send("‚ùå –ì–∞—Ä–≥–∞—Ö —Ç–æ–≥–ª–æ–≥—á –±–∞–≥—Ç –±–∞–π—Ö–≥“Ø–π –±–∞–π–Ω–∞.", ephemeral=True)
        return

    # ‚ùå to_user –∞–ª—å —Ö—ç–¥–∏–π–Ω ”©”©—Ä –±–∞–≥—Ç –±–∞–π–≤–∞–ª —Ö–∞—Å–Ω–∞
    for team in teams:
        if to_uid in team:
            team.remove(to_uid)

    # ‚úÖ from_user –±–∞–π—Å–∞–Ω –±–∞–≥—Ç to_user-–≥ –æ—Ä—É—É–ª–Ω–∞
    teams[from_team_index].append(to_uid)

    # üîÅ –°–æ–ª–∏–≥–¥—Å–æ–Ω –≥–∏—à“Ø“Ø–¥–∏–π–≥ —Ç—ç–º–¥—ç–≥–ª—ç–Ω—ç
    changed = TEAM_SETUP.get("changed_players", [])
    if from_uid not in changed:
        changed.append(from_uid)
    if to_uid not in changed:
        changed.append(to_uid)
    TEAM_SETUP["changed_players"] = changed

    # üíæ SQL-–¥ —Ö–∞–¥–≥–∞–ª–∞—Ö
    await save_session_state({
        "active": GAME_SESSION["active"],
        "start_time": GAME_SESSION["start_time"].isoformat() if GAME_SESSION["start_time"] else None,
        "last_win_time": GAME_SESSION["last_win_time"].isoformat() if GAME_SESSION["last_win_time"] else None,
        "initiator_id": TEAM_SETUP.get("initiator_id"),
        "team_count": TEAM_SETUP.get("team_count"),
        "players_per_team": TEAM_SETUP.get("players_per_team"),
        "player_ids": TEAM_SETUP.get("player_ids"),
        "teams": TEAM_SETUP.get("teams"),
        "changed_players": TEAM_SETUP["changed_players"],
        "strategy": TEAM_SETUP.get("strategy", "")
    })

    await interaction.followup.send(
        f"üîÅ **{from_user.display_name}** –±–∞–≥aa –æ—Ä—Ö–∏–∂ **{to_user.display_name}** –æ—Ä–ª–æ–æ!\n"
        f"üìå {from_team_index+1}-—Ä –±–∞–≥—Ç —Å–æ–ª–∏–≥–¥–æ–ª—Ç —Ö–∏–π–≥–¥—Å—ç–Ω."
    )

@bot.tree.command(name="undo_last_match", description="–°“Ø“Ø–ª–¥ —Ö–∏–π—Å—ç–Ω match-–∏–π–Ω –æ–Ω–æ–æ–≥ –±—É—Ü–∞–∞–Ω–∞")
async def undo_last_match(interaction: discord.Interaction):
    try:
        await interaction.response.defer(thinking=True)
    except discord.errors.InteractionResponded:
        print("‚ùå Interaction already responded.")
        return

    is_admin = interaction.user.guild_permissions.administrator
    is_initiator = interaction.user.id == TEAM_SETUP.get("initiator_id")
    if not (is_admin or is_initiator):
        await interaction.followup.send("‚õîÔ∏è –ó”©–≤—Ö”©–Ω –∞–¥–º–∏–Ω —ç—Å–≤—ç–ª session —ç—Ö–ª“Ø“Ø–ª—Å—ç–Ω —Ö“Ø–Ω –∞–∂–∏–ª–ª—É—É–ª–∂ —á–∞–¥–Ω–∞.", ephemeral=True)
        return

    last = await get_last_match()
    if not last:
        await interaction.followup.send("‚ö†Ô∏è –°“Ø“Ø–ª–¥ –±“Ø—Ä—Ç–≥—ç—Å—ç–Ω match –æ–ª–¥—Å–æ–Ω–≥“Ø–π.", ephemeral=True)
        return

    winners = last.get("winners", [])
    losers = last.get("losers", [])
    guild = interaction.guild
    changed_ids = []

    def validate_tier(tier): return tier if tier in TIER_ORDER else "4-1"

    async def process_user(uid: int, delta: int):
        try:
            data = await get_score(uid) or get_default_tier()
            data["tier"] = validate_tier(data["tier"])
            old_score = data["score"]
            data["score"] += delta
            if data["score"] >= 5:
                data["tier"] = promote_tier(data["tier"])
                data["score"] = 0
            elif data["score"] <= -5:
                data["tier"] = demote_tier(data["tier"])
                data["score"] = 0
            member = guild.get_member(uid)
            data["username"] = member.display_name if member else "Unknown"
            await upsert_score(uid, data["score"], data["tier"], data["username"])
            await log_score_transaction(uid, delta, data["score"], data["tier"], reason="undo")
            changed_ids.append(uid)
        except Exception as e:
            print(f"‚ùå Undo score fail for uid:{uid} ‚Äì {e}")

    for uid in winners:
        await process_user(uid, -1)
    for uid in losers:
        await process_user(uid, +1)

    # üìâ Win/Loss –±—É—Ü–∞–∞—Ö
    try:
        await update_player_stats(winners, is_win=True, undo=True)
        await update_player_stats(losers, is_win=False, undo=True)
    except Exception as e:
        print("‚ö†Ô∏è player_stats undo –∞–ª–¥–∞–∞:", e)

    try:
        await save_last_match([], [])  # üßπ clear
    except Exception as e:
        print("‚ö†Ô∏è save_last_match clear –∞–ª–¥–∞–∞:", e)

    try:
        await update_nicknames_for_users(interaction.guild, changed_ids)
    except Exception as e:
        print("‚ö†Ô∏è nickname update –∞–ª–¥–∞–∞:", e)

    win_mentions = " ".join(f"<@{uid}>" for uid in winners)
    lose_mentions = " ".join(f"<@{uid}>" for uid in losers)

    await interaction.followup.send(
        f"‚ôªÔ∏è Match –±—É—Ü–∞–∞–≥–¥–ª–∞–∞!\n"
        f"üèÜ Winner-—É—É–¥: {win_mentions}\n"
        f"üíÄ Loser-—É—É–¥: {lose_mentions}"
    )
    await interaction.followup.send("‚úÖ Match –±“Ø—Ä—Ç–≥—ç–ª —Ü—ç–≤—ç—Ä–ª—ç–≥–¥–ª—ç—ç.")

@bot.tree.command(name="my_score", description="–¢–∞–Ω—ã –æ–Ω–æ–æ –±–æ–ª–æ–Ω tier-–≥ —Ö–∞—Ä—É—É–ª–Ω–∞")
async def my_score(interaction: discord.Interaction):
    try:
        await interaction.response.defer(thinking=True)  # ‚¨ÖÔ∏è public response
    except discord.errors.InteractionResponded:
        return

    uid = interaction.user.id
    data = await get_score(uid)

    if not data:
        await interaction.followup.send("‚ö†Ô∏è –¢–∞–Ω—ã –æ–Ω–æ–æ –±“Ø—Ä—Ç–≥—ç–ª–≥“Ø–π –±–∞–π–Ω–∞.")
        return

    tier = data.get("tier", "?")
    score = data.get("score", 0)
    username = data.get("username") or interaction.user.display_name

    await interaction.followup.send(
        f"üèÖ {username}:\n"
        f"Tier: **{tier}**\n"
        f"Score: **{score}**"
    )

@bot.tree.command(name="user_score", description="–ë—É—Å–∞–¥ —Ç–æ–≥–ª–æ–≥—á–∏–π–Ω –æ–Ω–æ–æ –±–æ–ª–æ–Ω tier-–≥ —Ö–∞—Ä—É—É–ª–Ω–∞")
@app_commands.describe(user="–û–Ω–æ–æ–≥ –Ω—å —Ö–∞—Ä–∞—Ö discord —Ö—ç—Ä—ç–≥–ª—ç–≥—á")
async def user_score(interaction: discord.Interaction, user: discord.Member):
    try:
        await interaction.response.defer(ephemeral=True)
    except discord.errors.InteractionResponded:
        return

    uid = user.id
    data = await get_score(uid)

    if not data:
        await interaction.followup.send(f"‚ö†Ô∏è {user.display_name} –æ–Ω–æ–æ –±“Ø—Ä—Ç–≥—ç–ª–≥“Ø–π –±–∞–π–Ω–∞.")
        return

    tier = data.get("tier", "4-1")
    score = data.get("score", 0)
    username = data.get("username") or user.display_name

    await interaction.followup.send(
        f"üèÖ {username}:\n"
        f"Tier: **{tier}**\n"
        f"Score: **{score}**"
    )

@bot.tree.command(name="player_stats", description="–¢–∞–Ω—ã –Ω–∏–π—Ç win/loss —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫")
async def player_stats(interaction: discord.Interaction):
    try:
        await interaction.response.defer(ephemeral=True)
    except discord.errors.InteractionResponded:
        return

    uid = interaction.user.id
    conn = await connect()
    row = await conn.fetchrow("SELECT wins, losses FROM player_stats WHERE uid = $1", uid)
    await conn.close()

    if not row:
        await interaction.followup.send("‚ö†Ô∏è –¢–∞–Ω—ã —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫ –±“Ø—Ä—Ç–≥—ç–ª–≥“Ø–π –±–∞–π–Ω–∞.")
        return

    wins = row["wins"] or 0
    losses = row["losses"] or 0
    total = wins + losses
    win_rate = (wins / total) * 100 if total > 0 else 0.0

    username = interaction.user.display_name

    await interaction.followup.send(
        f"üìä **{username} —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫**\n"
        f"üèÜ –Ø–ª–∞–ª—Ç: `{wins}` —Ç–æ–≥–ª–æ–ª—Ç\n"
        f"üíÄ –Ø–ª–∞–≥–¥–∞–ª: `{losses}` —Ç–æ–≥–ª–æ–ª—Ç\n"
        f"üìä Total: `{total}` —Ç–æ–≥–ª–æ–ª—Ç\n"
        f"üî• Win rate: `{win_rate:.1f}%`"
    )

@bot.tree.command(name="set_tier", description="–ê–¥–º–∏–Ω: —Ç–æ–≥–ª–æ–≥—á–∏–π–Ω tier –±–æ–ª–æ–Ω –æ–Ω–æ–æ–≥ –≥–∞—Ä –∞—Ä–≥–∞–∞—Ä —Ç–æ—Ö–∏—Ä—É—É–ª–Ω–∞")
@app_commands.describe(
    user="–•—ç—Ä—ç–≥–ª—ç–≥—á–∏–π–≥ –∑–∞–∞–Ω–∞ (@mention)",
    tier="–®–∏–Ω—ç tier (–∂: 3-2)",
    score="–û–Ω–æ–æ (default: 0)"
)
async def set_tier(interaction: discord.Interaction, user: discord.Member, tier: str, score: int = 0):
    if not interaction.user.guild_permissions.administrator:
        await interaction.response.send_message("‚õîÔ∏è –ó”©–≤—Ö”©–Ω –∞–¥–º–∏–Ω —Ç–æ—Ö–∏—Ä—É—É–ª–∂ —á–∞–¥–Ω–∞.", ephemeral=True)
        return

    tier_list = list(TIER_WEIGHT.keys())
    if tier not in tier_list:
        await interaction.response.send_message("‚ö†Ô∏è Tier —É—Ç–≥–∞ –±—É—Ä—É—É –±–∞–π–Ω–∞.", ephemeral=True)
        return

    uid = user.id
    username = user.display_name

    await upsert_score(uid, score, tier, username)
    await update_nicknames_for_users(interaction.guild, [uid])

    await interaction.response.send_message(
        f"‚úÖ {username}-–∏–π–Ω tier **{tier}**, score **{score}** –±–æ–ª–∂ —à–∏–Ω—ç—á–ª—ç–≥–¥–ª—ç—ç.", ephemeral=True
    )

@bot.tree.command(name="add_score", description="–¢–µ—Å—Ç: –æ–Ω–æ–æ –Ω—ç–º—ç—Ö")
@app_commands.describe(
    mentions="@mention —Ö—ç–ª–±—ç—Ä—ç—ç—Ä –∑–∞–∞–Ω–∞",
    points="–ù—ç–º—ç—Ö –æ–Ω–æ–æ (default: 1)"
)
async def add_score(interaction: discord.Interaction, mentions: str, points: int = 1):
    if not interaction.user.guild_permissions.administrator:
        await interaction.response.send_message("‚õîÔ∏è –ó”©–≤—Ö”©–Ω –∞–¥–º–∏–Ω —Ö—ç—Ä—ç–≥–ª—ç–Ω—ç.", ephemeral=True)
        return

    try:
        await interaction.response.defer(thinking=True)
    except discord.errors.InteractionResponded:
        return

    user_ids = [int(word[2:-1].replace("!", "")) for word in mentions.split() if word.startswith("<@") and word.endswith(">")]

    if not user_ids:
        await interaction.followup.send("‚ö†Ô∏è –•—ç—Ä—ç–≥–ª—ç–≥—á–∏–π–Ω mention –æ—Ä—É—É–ª–Ω–∞ —É—É.")
        return

    updated = []

    for uid in user_ids:
        member = interaction.guild.get_member(uid)
        if not member:
            continue

        data = await get_score(uid) or get_default_tier()
        data["username"] = member.display_name
        data["score"] += points

        score = data["score"]
        tier = data["tier"]

        while score >= 5:
            tier = promote_tier(tier)
            score = 0
        while score <= -5:
            tier = demote_tier(tier)
            score = 0

        data["score"] = score
        data["tier"] = tier

        await upsert_score(uid, score, tier, data["username"])
        updated.append(uid)

    try:
        await update_nicknames_for_users(interaction.guild, updated)
    except Exception as e:
        print("‚ö†Ô∏è nickname update error:", e)

    mentions_text = ", ".join(f"<@{uid}>" for uid in updated)
    await interaction.followup.send(f"‚úÖ –¢–µ—Å—Ç –æ–Ω–æ–æ {points:+} ‚Äì {mentions_text}")

@bot.tree.command(name="add_donator", description="–ê–¥–º–∏–Ω: —Ç–æ–≥–ª–æ–≥—á–∏–π–≥ donator –±–æ–ª–≥–æ–Ω–æ")
@app_commands.describe(
    member="Donator –±–æ–ª–≥–æ—Ö —Ö—ç—Ä—ç–≥–ª—ç–≥—á",
    mnt="–•–∞–Ω–¥–∏–≤–ª–∞—Å–∞–Ω –º”©–Ω–≥”© (‚ÇÆ)"
)
async def add_donator(interaction: discord.Interaction, member: discord.Member, mnt: int):
    if not interaction.user.guild_permissions.administrator:
        await interaction.response.send_message("‚ùå –≠–Ω—ç –∫–æ–º–∞–Ω–¥—ã–≥ –∑”©–≤—Ö”©–Ω –∞–¥–º–∏–Ω —Ö—ç—Ä—ç–≥–ª—ç–≥—á –∞–∂–∏–ª–ª—É—É–ª–∂ —á–∞–¥–Ω–∞.", ephemeral=True)
        return

    try:
        await interaction.response.defer(thinking=True)
    except discord.errors.InteractionResponded:
        return

    await upsert_donator(member.id, mnt)
    await update_nicknames_for_users(interaction.guild, [member.id])

    await interaction.followup.send(
        f"üéâ {member.mention} —Ö—ç—Ä—ç–≥–ª—ç–≥—á–∏–π–≥ Donator –±–æ–ª–≥–æ–ª–æ–æ! (+{mnt:,}‚ÇÆ –Ω—ç–º—ç–≥–¥–ª—ç—ç)"
    )

@bot.tree.command(name="donator_list", description="Donator —Ö—ç—Ä—ç–≥–ª—ç–≥—á–¥–∏–π–Ω –∂–∞–≥—Å–∞–∞–ª—Ç")
async def donator_list(interaction: discord.Interaction):
    if not interaction.user.guild_permissions.administrator:
        await interaction.response.send_message(
            "‚ùå –≠–Ω—ç –∫–æ–º–∞–Ω–¥—ã–≥ –∑”©–≤—Ö”©–Ω –∞–¥–º–∏–Ω —Ö—ç—Ä—ç–≥–ª—ç–≥—á –∞—à–∏–≥–ª–∞–∂ –±–æ–ª–Ω–æ.",
            ephemeral=True
        )
        return

    try:
        await interaction.response.defer(thinking=True)
    except discord.errors.InteractionResponded:
        return

    donors = await get_all_donators()
    if not donors:
        await interaction.followup.send("üì≠ Donator –±“Ø—Ä—Ç–≥—ç–ª –∞–ª–≥–∞ –±–∞–π–Ω–∞.")
        return

    scores = await get_all_scores()
    msg = "üíñ **Donators:**\n"
    sorted_donors = sorted(donors.items(), key=lambda x: x[1].get("total_mnt", 0), reverse=True)

    for uid, data in sorted_donors:
        member = interaction.guild.get_member(int(uid))
        if member:
            emoji = get_donator_emoji(data)
            total = data.get("total_mnt", 0)
            tier = scores.get(uid, {}).get("tier", "4-1")
            display_name = clean_nickname(member.display_name)

            display = f"{emoji} {tier} | {display_name}" if emoji else f"{tier} | {display_name}"
            msg += f"{display} ‚Äî {total:,}‚ÇÆ\n"

    await interaction.followup.send(msg)

@bot.tree.command(name="help_info", description="Bot-—ã–Ω —Ç–∞–Ω–∏–ª—Ü—É—É–ª–≥–∞ (readme.md —Ñ–∞–π–ª—ã–≥ —Ö–∞—Ä—É—É–ª–Ω–∞)")
async def help_info(interaction: discord.Interaction):
    try:
        with open("Info/Readme.md", "r", encoding="utf-8") as f:
            content = f.read()
    except FileNotFoundError:
        await interaction.response.send_message("‚ö†Ô∏è `Readme.md` —Ñ–∞–π–ª –æ–ª–¥—Å–æ–Ω–≥“Ø–π.", ephemeral=True)
        return

    if len(content) > 1900:
        content = content[:1900] + "\n...\n(“Ø—Ä–≥—ç–ª–∂–ª—ç–ª—Ç—ç–π)"

    await interaction.response.send_message(
        f"üìò **RZR Bot –¢–∞–Ω–∏–ª—Ü—É—É–ª–≥–∞**\n```markdown\n{content}\n```",
        ephemeral=True
    )

@bot.tree.command(name="help_commands", description="–ë“Ø—Ö –∫–æ–º–∞–Ω–¥—ã–Ω —Ç–∞–π–ª–±–∞—Ä –∂–∞–≥—Å–∞–∞–ª—Ç")
async def help_commands(interaction: discord.Interaction):
    try:
        with open("Info/Commands_alt.md", "r", encoding="utf-8") as f:
            content = f.read()
    except FileNotFoundError:
        await interaction.response.send_message("‚ö†Ô∏è `Commands_alt.md` —Ñ–∞–π–ª –æ–ª–¥—Å–æ–Ω–≥“Ø–π.", ephemeral=True)
        return

    if len(content) > 1900:
        content = content[:1900] + "\n...\n(“Ø—Ä–≥—ç–ª–∂–ª—ç–ª—Ç—ç–π)"

    await interaction.response.send_message(
        f"üìí **RZR Bot –ö–æ–º–º–∞–Ω–¥—É—É–¥**\n```markdown\n{content}\n```",
        ephemeral=True
    )

@bot.tree.command(name="whois", description="Mention —Ö–∏–π—Å—ç–Ω —Ö—ç—Ä—ç–≥–ª—ç–≥—á–∏–π–Ω –Ω—ç—Ä–∏–π–≥ —Ö–∞—Ä—É—É–ª–Ω–∞")
@app_commands.describe(mention="–•—ç—Ä—ç–≥–ª—ç–≥—á–∏–π–Ω mention (@name) —Ö—ç–ª–±—ç—Ä—ç—ç—Ä")
async def whois(interaction: discord.Interaction, mention: str):
    try:
        await interaction.response.defer(ephemeral=True)
    except discord.errors.InteractionResponded:
        return

    try:
        uid = int(mention.strip("<@!>"))
        member = await interaction.guild.fetch_member(uid)
        await interaction.followup.send(
            f"üïµÔ∏è‚Äç‚ôÇÔ∏è –≠–Ω—ç ID: `{uid}`\n"
            f"üîó Mention: {member.mention}\n"
            f"üë§ Display Name: `{member.display_name}`",
            ephemeral=True
        )
    except Exception as e:
        await interaction.followup.send(f"‚ùå –û–ª–¥—Å–æ–Ω–≥“Ø–π: {e}", ephemeral=True)

@bot.tree.command(name="debug_id", description="–¢–∞–Ω—ã Discord ID-–≥ —Ö–∞—Ä—É—É–ª–Ω–∞")
async def debug_id(interaction: discord.Interaction):
    try:
        await interaction.response.defer(ephemeral=True)
    except discord.errors.InteractionResponded:
        return

    await interaction.followup.send(f"üÜî –¢–∞–Ω—ã Discord ID: `{interaction.user.id}`", ephemeral=True)

@bot.tree.command(name="current_match", description="–û–¥–æ–æ–≥–∏–π–Ω –∏–¥—ç–≤—Ö—Ç—ç–π session-–¥ —Ö—É–≤–∏–∞—Ä–ª–∞–≥–¥—Å–∞–Ω –±–∞–≥—É—É–¥—ã–≥ —Ö–∞—Ä—É—É–ª–Ω–∞")
async def current_match(interaction: discord.Interaction):
    try:
        await interaction.response.defer(thinking=True)
    except discord.errors.InteractionResponded:
        return

    if not GAME_SESSION["active"]:
        await interaction.followup.send("‚ö†Ô∏è Session –∏–¥—ç–≤—Ö–≥“Ø–π –±–∞–π–Ω–∞.")
        return

    if not TEAM_SETUP.get("teams") or not any(TEAM_SETUP["teams"]):
        await interaction.followup.send("üì≠ –ë–∞–≥—É—É–¥ —Ö–∞—Ä–∞–∞—Ö–∞–Ω —Ö—É–≤–∞–∞—Ä–∏–ª–∞–≥–¥–∞–∞–≥“Ø–π –±–∞–π–Ω–∞.")
        return

    all_scores = await get_all_scores()
    guild = interaction.guild
    msg_lines = []

    for i, team in enumerate(TEAM_SETUP["teams"], start=1):
        total_score = sum(tier_score(all_scores.get(str(uid), {})) for uid in team)
        msg_lines.append(f"**üèÖ Team {i}** (–Ω–∏–π—Ç –æ–Ω–æ–æ: `{total_score}`):")

        for uid in team:
            data = all_scores.get(str(uid), {})
            tier = data.get("tier", "4-1")
            score = data.get("score", 0)
            member = guild.get_member(uid)
            name = member.display_name if member else f"`{uid}`"
            msg_lines.append(f"- {name} ({tier} | {score})")

        msg_lines.append("")  # newline

    await interaction.followup.send("\n".join(msg_lines))

@bot.tree.command(name="leaderboard", description="–¢–æ–ø 10 —Ç–æ–≥–ª–æ–≥—á–∏–π–Ω –æ–Ω–æ–æ, win/loss, winrate —Ö–∞—Ä—É—É–ª–Ω–∞")
async def leaderboard(interaction: discord.Interaction):
    try:
        await interaction.response.defer(thinking=True)
    except discord.errors.InteractionResponded:
        return

    all_scores = await get_all_scores()
    if not all_scores:
        await interaction.followup.send("üì≠ –û–Ω–æ–æ–Ω—ã –º—ç–¥—ç—ç–ª—ç–ª –±–∞–π—Ö–≥“Ø–π –±–∞–π–Ω–∞.")
        return

    # üßÆ Tier+score –Ω–∏–π–ª–±—ç—Ä—ç—ç—Ä —ç—Ä—ç–º–±—ç–ª–Ω—ç
    sorted_data = sorted(all_scores.items(), key=lambda x: tier_score(x[1]), reverse=True)
    uid_list = [int(uid) for uid, _ in sorted_data[:10]]

    # üìä Player stats SQL-–æ–æ—Å –∞–≤–∞—Ö–∞–∞—Ä —Ç–æ—Ö–∏—Ä—É—É–ª—Å–∞–Ω
    stat_rows = await get_player_stats(uid_list)
    stat_map = {str(row["uid"]): {"wins": row["wins"], "losses": row["losses"]} for row in stat_rows}

    lines = ["üèÖ **Leaderboard** ‚Äî Top 10 (Tier + Score | üèÜ/üíÄ ‚Äî Winrate%)"]
    for i, (uid, data) in enumerate(sorted_data[:10], 1):
        member = interaction.guild.get_member(int(uid))
        if not member:
            continue

        username = data.get("username") or member.display_name
        tier = data.get("tier", "4-1")
        score = data.get("score", 0)

        stat = stat_map.get(uid, {})
        wins = stat.get("wins", 0)
        losses = stat.get("losses", 0)
        total = wins + losses
        winrate = (wins / total * 100) if total > 0 else 0.0

        lines.append(f"{i}. {tier} | {score:+} ‚Äî {username} üèÜ{wins} / üíÄ{losses} ‚Äî {winrate:.1f}%")

    await interaction.followup.send("\n".join(lines))

@bot.tree.command(name="match_history", description="–°“Ø“Ø–ª–∏–π–Ω 5 match-–∏–π–Ω –º—ç–¥—ç—ç–ª—ç–ª (SQL —Ö—É–≤–∏–ª–±–∞—Ä)")
async def match_history(interaction: discord.Interaction):
    try:
        await interaction.response.defer(thinking=True)
    except discord.errors.InteractionResponded:
        return

    import psycopg2
    from psycopg2.extras import RealDictCursor

    conn = psycopg2.connect(DATABASE_URL)
    cur = conn.cursor(cursor_factory=RealDictCursor)

    cur.execute("""
        SELECT timestamp, mode, initiator_id, strategy, teams, winner_team
        FROM matches
        ORDER BY timestamp DESC
        LIMIT 5;
    """)
    rows = cur.fetchall()
    cur.close()
    conn.close()

    if not rows:
        await interaction.followup.send("üì≠ Match –±“Ø—Ä—Ç–≥—ç–ª —Ö–æ–æ—Å–æ–Ω –±–∞–π–Ω–∞.")
        return

    lines = ["üìú **–°“Ø“Ø–ª–∏–π–Ω Match-—É—É–¥:**"]
    for i, row in enumerate(rows, 1):
        ts = row["timestamp"]
        dt = datetime.fromisoformat(str(ts)).astimezone(timezone(timedelta(hours=8)))
        ts_str = dt.strftime("%Y-%m-%d %H:%M")

        mode = row["mode"]
        strategy = row.get("strategy", "-")
        initiator_id = row.get("initiator_id", None)
        initiator_tag = f"<@{initiator_id}>" if initiator_id else "?"
        teams = row["teams"]
        winner = row.get("winner_team", None)

        lines.append(f"\n**#{i} | {mode.upper()} | üß† `{strategy}` | üïì {ts_str}** ‚Äî {initiator_tag}")

        for t_idx, team in enumerate(teams, 1):
            tag = "üèÜ" if winner == t_idx else "üéÆ"
            players = ", ".join(f"<@{uid}>" for uid in team)
            lines.append(f"{tag} Team {t_idx}: {players}")

    await interaction.followup.send("\n".join(lines))

@bot.tree.command(name="resync", description="Slash –∫–æ–º–∞–Ω–¥—É—É–¥—ã–≥ –¥–∞—Ö–∏–Ω –±“Ø—Ä—Ç–≥—ç–Ω—ç (–∞–¥–º–∏–Ω)")
async def resync(interaction: discord.Interaction):
    try:
        await interaction.response.defer(thinking=True)
    except discord.errors.InteractionResponded:
        return

    if not interaction.user.guild_permissions.administrator:
        await interaction.followup.send("‚õîÔ∏è –ó”©–≤—Ö”©–Ω –∞–¥–º–∏–Ω –∞—à–∏–≥–ª–∞–Ω–∞.", ephemeral=True)
        return

    try:
        synced = await bot.tree.sync(guild=interaction.guild)
        await interaction.followup.send(f"‚úÖ {len(synced)} –∫–æ–º–∞–Ω–¥ –∞–º–∂–∏–ª—Ç—Ç–∞–π –¥–∞—Ö–∏–Ω –±“Ø—Ä—Ç–≥—ç–≥–¥–ª—ç—ç.", ephemeral=True)
    except Exception as e:
        print("‚ùå resync –∞–ª–¥–∞–∞:", e)
        await interaction.followup.send("‚ö†Ô∏è –ö–æ–º–º–∞–Ω–¥ sync —Ö–∏–π—Ö “Ø–µ–¥ –∞–ª–¥–∞–∞ –≥–∞—Ä–ª–∞–∞.", ephemeral=True)

# üéØ Run
async def main():
    from keep_alive import keep_alive
    keep_alive()  # üü¢ Railway –¥—ç—ç—Ä –∞–º—å–¥ –±–∞–π–ª–≥–∞—Ö —Å–µ—Ä–≤–µ—Ä

    if not TOKEN:
        print("‚ùå DISCORD_TOKEN —Ç–æ—Ö–∏—Ä—É—É–ª–∞–≥–¥–∞–∞–≥“Ø–π –±–∞–π–Ω–∞.")
        return

    print("üöÄ Bot —ç—Ö–ª—ç—Ö –≥—ç–∂ –±–∞–π–Ω–∞...")
    await bot.start(TOKEN)


if __name__ == "__main__":
    import asyncio
    asyncio.run(main())


